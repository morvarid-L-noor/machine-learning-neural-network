# -*- coding: utf-8 -*-
"""HW2-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cxMWIj9SzuJnfCToOV8U0OWeEbXGZhkm
"""

import numpy as np
import pandas as pd

def activation_func(value):    #Sigmoid
    return (1/(1+np.exp(-value)))

def update_weights(x , weights , d , alpha):
  y = activation_func(np.matmul(x,weights))
  delta = alpha*(d - y)*x
  weights = weights + np.transpose(delta)
  e = (d - y)**2 / 2
  return e , weights

def update_y(x , weights):
  return activation_func(np.matmul(x,weights))

def test(x , weights , target):
  y = update_y(x,weights)
  e = (target - y)**2 / 2
  return y , e

"""**L** : """

x  = np.array([[1, 0, 0, 1, 0, 0, 1, 1, 1]])
weights = np.random.random(np.transpose(x).shape)
y=activation_func(np.matmul(x,weights))
epoch = 0
d = 1
alpha = 0.1
while(y < 0.9999):
  y = update_y(x,weights)
  e , weights = update_weights(x,weights,d,alpha)
  epoch += 1
  print(e , y , " number of epochs : " , epoch)

"""**testing L :**"""

x_test1  = np.array([[0, 1, 0, 1, 0, 0, 1, 1, 1]])
x_test2  = np.array([[1, 0, 0, 1, 0, 0, 1, 1, 0]])
x_test3  = np.array([[1, 0, 0, 0, 1, 0, 1, 1, 1]])

y_test1 , e_test1  = test(x_test1 , weights , d)
y_test2 , e_test2  = test(x_test2 , weights , d)
y_test3 , e_test3  = test(x_test3 , weights , d)

print("y_test1 : " , y_test1 , " e_test1 : " , e_test1)
print("y_test2 : " , y_test2 , " e_test2 : " , e_test2)
print("y_test3 : " , y_test3 , " e_test3 : " , e_test3)

"""**I** :"""

xi = np.array([[0, 1, 0, 0, 1, 0, 0, 1, 0]])
weightsi = np.random.random(np.transpose(xi).shape)
epoch = 0
di = 0
alphai = 0.1
while(yi > 0.0001):
  yi = update_y(xi,weightsi)
  ei , weightsi = update_weights(xi,weightsi,di,alphai)
  epoch += 1
  print(ei , yi , " number of epochs : " , epoch)
  print(1)

"""**Testing I**:"""

xi_test1  = np.array([[0, 1, 0, 0, 1, 0, 0, 0, 1]])
xi_test2  = np.array([[1, 1, 0, 0, 1, 0, 0, 1, 0]])
xi_test3  = np.array([[0, 0, 0, 0, 1, 0, 0, 1, 0]])

yi_test1 , ei_test1  = test(xi_test1 , weightsi , 0)
yi_test2 , ei_test2  = test(xi_test2 , weightsi , 0)
yi_test3 , ei_test3  = test(xi_test3 , weightsi , 0)

print("y_test1 : " , yi_test1 , " e_test1 : " , ei_test1)
print("y_test2 : " , yi_test2 , " e_test2 : " , ei_test2)
print("y_test3 : " , yi_test3 , " e_test3 : " , ei_test3)

"""
**Q2 --------------------------------------------------------------------**

"""

import math
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from matplotlib import pyplot as plt

def activation_func(value):    #Sigmoid
    return (1/(1+np.exp(-value)))

x = pd.read_csv("train.csv")
x = pd.DataFrame(x).to_numpy() 
d = pd.read_csv("target.csv")
d = pd.DataFrame(d).to_numpy()

m = 400
n = 25
l = 10
etha = 25
Alpha = 0.75
Emax = 0.63
v = np.random.random((m , n)) 
w = np.random.random((n+1 , l))
delta_v = np.zeros(v.shape)
delta_w = np.zeros(w.shape)
delta_z = np.zeros((1,l)) #  dim(x.v)
delta_y = np.zeros((1,n))
y = np.zeros((1,n)) 
z = np.zeros((1,l)) 
p = 1
K = 1   # number of epochs
E = 0

def test(P , n , l , v , w , x):
  a = np.array([[1]])
  y = np.zeros((1,n)) 
  y = np.concatenate((y , a), axis=1)
  z = np.zeros((1,l)) 
  for p in range(P):
    for j in range(n):
      y[0][j]=activation_func(np.matmul(x[p],np.transpose(v)[j]))

    for q in range(l):
          z[0][q] = activation_func(np.matmul(y , np.transpose(w)[q]))
    
  return z

def process(E , y , P , x , d):
  sigma = 0
  sigma2 = np.zeros((1,n))
  delta_y = np.zeros((1,n))
  a = np.array([[1]])
  y = np.concatenate((y , a), axis=1)
  sigma2 = np.concatenate((sigma2 , a), axis=1)
  delta_y = np.concatenate((delta_y , a), axis=1)
  for p in range(P):
    for j in range(n):
      y[0][j]=activation_func(np.matmul(x[p],np.transpose(v)[j]))

    for j in range(n):
      for q in range(l):
        z[0][q] = activation_func(np.matmul(y , np.transpose(w)[q]))
        sigma += (d[q] - z[0][q])**2
        delta_z[0][q] = (d[q] - z[0][q]) * z[0][q] * (1 - z[0][q])
        sigma2[0][j] += delta_z[0][q] * w[j][q]
        new_w = np.reshape((etha * np.transpose(y) * delta_z[0][q]) , (Alpha * np.transpose(delta_w)[q]).shape) 
        np.transpose(delta_w)[q] =  new_w + Alpha * np.transpose(delta_w)[q] 
        w[j][q] += delta_w[j][q] 
      delta_y[0][j] = y[0][j] * (1 - y[0][j]) * (sigma2[0][j])

    '''for j in range(n):
      delta_y[j] = y[j] . (1 - y[j]) . ()
    '''
    for i in range(m):
      for j in range(n):
        delta_v[i][j] = etha * x[p][i] * delta_y[0][j] + Alpha * delta_v[i][j]
        v[i][j] += delta_v[i][j]

    E = sigma + E
    return E , v , w

K = 0
P = 4999
e , _ , _ = process(E , y , P , x ,d)
calculated_e = math.sqrt(e/(P*l))  
print(calculated_e)
errors = []
epochs = []
while calculated_e > Emax:  
  K += 1
  E = 0
  e , _ , _ = process(E , y , P , x ,d)
  for i in range(0, 2000000, 10):
    if(K == i):
      print(math.sqrt(e/(P*l)) ," time : ", K)
      errors.append(math.sqrt(e/(P*l)))
      epochs.append(K)

v

w

plt.plot(epochs , errors)

"""**trainig by 70 %** :"""

x = pd.read_csv("train.csv")
x = pd.DataFrame(x).to_numpy() 
d = pd.read_csv("target.csv")
d = pd.DataFrame(d).to_numpy()
x_train, x_test, d_train, d_test = train_test_split(x, d, test_size=0.3, random_state=42)

m = 400
n = 25
l = 10
etha = 100
Alpha = 0.75
Emax = 0.3
v = np.random.random((m , n)) 
w = np.random.random((n+1 , l))
delta_v = np.zeros(v.shape)
delta_w = np.zeros(w.shape)
delta_z = np.zeros((1,l)) #  dim(x.v)
delta_y = np.zeros((1,n))
y = np.zeros((1,n)) 
z = np.zeros((1,l)) 
p = 1
K = 1   # number of epochs
E = 0

etha = 200

K = 0
P = 3500
e ,  v, w = process(E , y , P , x_train , d_train)
calculated_e = math.sqrt(e/(P*l))  
print(calculated_e)
errors = []
epochs = []
while calculated_e > Emax:  
  K += 1
  E = 0
  e , v , w = process(E , y , P , x_train , d_train)
  for i in range(0, 200000, 10):
    if(K == i):
      print(math.sqrt(e/(P*l)) ," time : ", K)
      errors.append(math.sqrt(e/(P*l)))
      epochs.append(K)

plt.plot(epochs , errors)

x_train, x_test, d_train, d_test = train_test_split(x, d, test_size=0.5, random_state=42)
x_valid, x_test, d_valid, d_test = train_test_split(x_test, d_test, test_size=0.5, random_state=42)

print(x_test.shape , x_valid.shape , x_train.shape)
print(d_test.shape , d_valid.shape , d_train.shape)

m = 400
n = 25
l = 10
etha = 100
Alpha = 0.75
v = np.random.random((m , n)) 
w = np.random.random((n+1 , l))
delta_v = np.zeros(v.shape)
delta_w = np.zeros(w.shape)
delta_z = np.zeros((1,l)) #  dim(x.v)
delta_y = np.zeros((1,n))
y = np.zeros((1,n)) 
z = np.zeros((1,l)) 
p = 1
K = 1   # number of epochs
E = 0

P = 1250
e ,  v, w = process(E , y , P , x_valid , d_valid)
calculated_e = math.sqrt(e/(P*l))  # its value  will be considered as "Emax" to stop the trainig loop
print(calculated_e)

Emax = 0.496
K = 0
P = 2500
e ,  v, w = process(E , y , P , x_train , d_train)
calculated_e = math.sqrt(e/(P*l))  
print(calculated_e)
errors = []
epochs = []
while calculated_e > Emax:  
  K += 1
  E = 0
  e , v , w = process(E , y , P , x_train , d_train)
  for i in range(0, 20000, 10):
    if(K == i):
      print(math.sqrt(e/(P*l)) ," time : ", K)
      errors.append(math.sqrt(e/(P*l)))
      epochs.append(K)

plt.plot(epochs , errors)

K = 0
P = 1250
#e ,  v, w = process(E , y , P , x_test , d_test)
z = test(P , n , l , v , w ,x_test )
'''calculated_e = math.sqrt(e/(P*l))  
print(calculated_e)
errors = []
epochs = []
while calculated_e > Emax:  
  K += 1
  E = 0
  e , v , w = process(E , y , P , x_test , d_test)
  for i in range(0, 200, 10):
    if(K == i):
      print(math.sqrt(e/(P*l)) ," time : ", K)
      errors.append(math.sqrt(e/(P*l)))
      epochs.append(K)
  '''
for i in range(len(d_test)):
  print(d_test[i]  , z[i])

d_test.shape

